/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'zhangcheng' at '17-1-17 下午8:18' with Gradle 2.10
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */

group 'org.opensearch'
version = '2.13.0' // 适配不通版本的ES，可以修改这里。
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.yaml-rest-test'
// apply plugin: 'opensearch.pluginzip'

sourceCompatibility = "11" // 不同版本的es，需要不同版本的java环境，注意修改这里
targetCompatibility = "11" // 不同版本的es，需要不同版本的java环境，注意修改这里
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

def pluginName = 'opensearch-jieba-plugin'
def pluginDescription = 'Jieba plugin for OpenSearch'
def projectPath = 'org.opensearch'
def pathToPlugin = 'plugin.jieba'
def pluginClassName = 'JiebaPlugin'

validateNebulaPom.enabled = false
dependencyLicenses.enabled = false

opensearchplugin {
    name pluginName
    description pluginDescription
    classname "${projectPath}.${pathToPlugin}.${pluginClassName}"
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}

buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "2.13.0")
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }
        resources {
            srcDir "src/main/resources"
            srcDir "src/main/assemblies"
            srcDir "src/main/dic"
            include "**/*"
        }
    }
}

task initSourceFolders {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}


configurations {
    wagon
    distJars {
        extendsFrom runtimeOnly
        exclude group: 'org.opensearch'
        exclude group: 'lucene-core'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'lucene-analyzers-common'
        exclude group: 'org.apache.commons'
    }
}

dependencies {
    implementation project(":jieba-analysis")
    implementation 'org.opensearch:opensearch:2.13.0' // 适配不通版本的ES，可以修改这里。
    implementation 'org.apache.logging.log4j:log4j-api:2.21.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.21.0'
    testImplementation 'junit:junit:4.13.2'
}

tasks.named("processResources") {
    duplicatesStrategy = 'include'
}

task pz(type: Zip, dependsOn: [':jar']) {
    into("jieba") {
        from configurations.distJars
        from 'build/libs'
        from 'jieba-analysis/build/libs'
        from 'build/resources/main/plugin.xml'
        from 'build/resources/main/plugin-descriptor.properties'
    }
    from('build/resources/main/') {
        include '**.dict'
        include '**.txt'
        into('jieba/dic')
    }
}
